[main]
# listener = org.apache.shiro.config.event.LoggingBeanListener
cacheManager = org.apache.shiro.cache.ehcache.EhCacheManager

sessionManager = org.apache.shiro.web.session.mgt.DefaultWebSessionManager
sessionDAO = org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO
sessionValidationScheduler = org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler
sessionManager.sessionDAO = $sessionDAO
sessionManager.sessionValidationScheduler = $sessionValidationScheduler

firstSuccessfulStrategy = org.apache.shiro.authc.pam.FirstSuccessfulStrategy
shiro.loginUrl = /login
shiro.unauthorizedUrl = /unauthorized

shiroIniRealm = org.apache.shiro.realm.text.IniRealm
shiroIniRealm.resourcePath = classpath:shiro.ini
shiroIniRealm.name = INI

loginRealm = org.jzb.execution.shiro.LoginRealm
loginRealm.name = LOGIN

weixinRealm = org.jzb.execution.shiro.WeixinRealm
weixinRealm.name = WEIXIN_OAUTH

securityManager.realms = $shiroIniRealm, $loginRealm, $weixinRealm
securityManager.authenticator.authenticationStrategy = $firstSuccessfulStrategy
securityManager.cacheManager = $cacheManager
[users]
# format: username = password, role1, role2, ..., roleN
ADMIN = test,admin

[roles]
# format: roleName = permission1, permission2, ..., permissionN
admin = *

[urls]
# The /login.jsp is not restricted to authenticated users (otherwise no one could log in!), but
# the 'authc' filter must still be specified for it so it can process that url's
# login submissions. It is 'smart' enough to allow those requests through as specified by the
# shiro.loginUrl above.
/WeixinInterfaceServlet = anon
/WeixinPayInterfaceServlet = anon
/WeixinPayNotifyInterfaceServlet = anon
/oauth/** = anon
/api/auth/** = anon
/api/opens/** = anon
/api/admin/** = roles[admin]
/api/** = authc
/** = anon